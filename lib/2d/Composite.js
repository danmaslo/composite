const Circle = require('./Circle.js');
const Fs = require('fs');

class Composite {
	// constructor
    constructor(width, height) {
		this._width = width;
		this._height = height;
		this._objects = [];
		this._ff = 0.0; // filling factor
    }


	// getters and setters
	get width() {
		return this._width;
	}

	set width(width) {
		this._width = width;
	}

	get height() {
		return this._height;
	}

	get objects() {
		return this._objects;
	}

	get ff() {
		return this._ff;;
	}


	// public methods
	getArea() {
		return(this._width * this._height);
	}

	toSvg(title) {
		var svg = "";

		svg = svg + "<?xml version=\"1.0\" standalone=\"no\" ?>\n";
        svg = svg + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n";
        svg = svg + "<svg width=\"" + this._width + "\" height=\"" + this._height + "\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n";
        svg = svg + "<title>" + title + "</title>\n";
        svg = svg + "<desc>generated by https://github.com/danmaslo/composite</desc>\n\n";

            // objects
            for (var i = 0; i < this._objects.length; i++) {
                svg = svg + this._objects[i].toSvg();
            }

        svg = svg + "</svg>";

		return(svg);
	}

	saveSvg(filename) {
		Fs.writeFile(filename + ".svg", this.toSvg(filename), function (err) {
			if (err) return console.log(err);
		});
	}

	isIn(c) {
		if ((c.r <= c.c.x) && ((c.c.x + c.r) <= this._width) && (c.r <= c.c.y) && ((c.c.y + c.r) <= this._height)) {
			return(true);
		}
		else {
			return(false);
		}
	}

	add(c) {
		if (this.isIn(c)) {
			for (var i = 0; i < this._objects.length; i++) {
				if (Circle.isOverlap(c, this._objects[i])) {
					return(false);
				}
			}

			this._objects.push(c);
			return(true);
		}
		else {
			return(false);
		}
	}
}

module.exports = Composite;
